# Operadores básicos
# Soma
4+4
# Subtração
4/4
# Potência
4^2**2
# Módulo
14%%3
# Operadores Básicos Relacionais e Lógicos em R
# Operadores básicos
# Soma
4+4
# Subtração
4/4
# Potência
4^2**2
# Módulo
14%%3
# Opreadores relacionais
# Atributos variáveis
a = 7
b = 8
# Operadores
a > 8
b < 8
c <= 8
# Operadores Básicos Relacionais e Lógicos em R
# Operadores básicos
# Soma
4+4
# Subtração
4/4
# Potência
4^2**2
# Módulo
14%%3
# Opreadores relacionais
# Atributos variáveis
a = 7
b = 8
# Operadores
a > 8
b < 8
a <= 8
b >= 8
a != 8
#Operadores lógicos
(a == 8) & (b != 6)
(a == 8) | (b != 6)
print(a != 8)
y2
# Tipos de Dados em R
# Numeric - Todos os números criados em R são do tipo numérico
num = 2.5
num
num2 = 4
num2
x = -123
x =
class(x)
#Conversão de tipos Numeric
is.integer(num2)
y = as.integer(num2)
class(y)
x2 = 3.14
x2
y2 = as.integer(x2)
y2
y = is.double(num2)
z = is.double(num2)
as.integer('3.14')
is.integer('3.14')
class('3.14')
as.integer(TRUE)
as.integer('3.14')
char
as.integer('3.14')
as.integer('Joe')
is.integer('3.14')
class('3.14')
as.integer(TRUE)
char = 'A'
char
# Números Complexos
complexo = 2.5 + 4i
complexo
class(complexo)
sqrt(-1)
sqrt(-1 + 0i)
sqrt(as.complex(-1))
# Lógico
x = 1;
y = -2
z = x > y
class(z)
z
u = TRUE; v = FALSE;
u & v
u | v
!u & !v
var1 = 367
var1
mode(var1)
help('mode')
gc()
help(typeof)
var2 = as.integer(var1)
var2
mode(var2)
typeof(var2)
help(typeof)
var3 = c('seg', 'ter', 'qua')
var3
mode(var3)
var5 = as.character(var1)
var5
mode(var5)
var4 = function(x){x+3}
var4
x <- c(4,5,6)
x
c(4,5,6) -> y
y
ls()
objects()
# Remover objetos
rm(x)
assign(x, c(1.3,6))
# Atibuíndo o valor em uma posição específica
x <- c(4,5,6)
x
c(4,5,6) -> y
y
assign('x', c(1.3,6))
x
x <- function(x) {x + 10}
x(10)
x <- function(x) {x * 10}
x <- function(x) {x * 10}
x(10)
vetor1 <- c(1:10)
vetor1
length(vetor)
length(vetor1)
vetor1 <- c(1:10)
vetor1
length(vetor1)
mode(vetor1)
class(vetor1)
typeof(vetor1)
matriz
matriz <- matrix(1:10, nrow= 2)
matriz
View(matriz)
vetor1 <- c(1:10)
# Matriz: Possui 2 dimensões e 1 tipod e dado
matriz <- matrix(1:10, nrow= 2)
matriz
length(matriz)
mode(matriz)
class(matriz)
typeof(matriz)
array1 <- array(1:5, dim=c(3,3,3))
array1 <- array(1:5, dim=c(3,3,3))
array1
# Array: Possui 2 ou mais dimensões e 1 tipo de dado
array1 <- array(1:5, dim=c(3,3,3))
array1
length(arra1)
Array: Possui 2 ou mais dimensões e 1 tipo de dado
# Array: Possui 2 ou mais dimensões e 1 tipo de dado
array1 <- array(1:5, dim=c(3,3,3))
array1
length(arra1)
# Array: Possui 2 ou mais dimensões e 1 tipo de dado
array1 <- array(1:5, dim=c(3,3,3))
array1
length(array1)
mode(array1)
class(array1)
typeof(array1)
View(iris)
View(iris)
length(iris)
mode(iris)
class(iris)
typeof(iris)
lista <- list(a=matriz1, b=vetor1)
lista <- list(a=matriz, b=vetor1)
View(lista)
# Listas: Coleções de diferentes objetos
# Diferentes tipos de dados são possíveis e comuns
lista <- list(0=matriz, 1=vetor1)
lista <- list(az=matriz, ax=vetor1)
lista <- list(az=matriz, ax=vetor1)
lista1
lista1 <- list(az=matriz, ax=vetor1)
lista1
length(lista1)
mode(lista1)
class(lista1)
typeof(lista1)
# Listas: Coleções de diferentes objetos
# Diferentes tipos de dados são possíveis e comuns
lista1 <- list(qualquer_coisa=matriz, outra_coisa=vetor1)
lista1
length(lista1)
mode(lista1)
class(lista1)
typeof(lista1)
View(lista1)
# Funções tabmém são vistas como objetos em R
func1 <- function(x) {
var1 <- x * x
return var1
# Funções tabmém são vistas como objetos em R
func1 <- function(x) {
var1 <- x * x
return (var1)
}
func1(5)
class(func1)
objects()
rm(arra1, func1)
objects()
# Removendo Objetos
objects()
rm(array1, func1)
objects()
