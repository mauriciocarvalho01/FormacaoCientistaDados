matriz <- matrix(1:10, nrow= 2)
matriz
View(matriz)
vetor1 <- c(1:10)
# Matriz: Possui 2 dimensões e 1 tipod e dado
matriz <- matrix(1:10, nrow= 2)
matriz
length(matriz)
mode(matriz)
class(matriz)
typeof(matriz)
array1 <- array(1:5, dim=c(3,3,3))
array1 <- array(1:5, dim=c(3,3,3))
array1
# Array: Possui 2 ou mais dimensões e 1 tipo de dado
array1 <- array(1:5, dim=c(3,3,3))
array1
length(arra1)
Array: Possui 2 ou mais dimensões e 1 tipo de dado
# Array: Possui 2 ou mais dimensões e 1 tipo de dado
array1 <- array(1:5, dim=c(3,3,3))
array1
length(arra1)
# Array: Possui 2 ou mais dimensões e 1 tipo de dado
array1 <- array(1:5, dim=c(3,3,3))
array1
length(array1)
mode(array1)
class(array1)
typeof(array1)
View(iris)
View(iris)
length(iris)
mode(iris)
class(iris)
typeof(iris)
lista <- list(a=matriz1, b=vetor1)
lista <- list(a=matriz, b=vetor1)
View(lista)
# Listas: Coleções de diferentes objetos
# Diferentes tipos de dados são possíveis e comuns
lista <- list(0=matriz, 1=vetor1)
lista <- list(az=matriz, ax=vetor1)
lista <- list(az=matriz, ax=vetor1)
lista1
lista1 <- list(az=matriz, ax=vetor1)
lista1
length(lista1)
mode(lista1)
class(lista1)
typeof(lista1)
# Listas: Coleções de diferentes objetos
# Diferentes tipos de dados são possíveis e comuns
lista1 <- list(qualquer_coisa=matriz, outra_coisa=vetor1)
lista1
length(lista1)
mode(lista1)
class(lista1)
typeof(lista1)
View(lista1)
# Funções tabmém são vistas como objetos em R
func1 <- function(x) {
var1 <- x * x
return var1
# Funções tabmém são vistas como objetos em R
func1 <- function(x) {
var1 <- x * x
return (var1)
}
func1(5)
class(func1)
objects()
rm(arra1, func1)
objects()
# Removendo Objetos
objects()
rm(array1, func1)
objects()
git l
## Strings
# String
texto <- "Isso é uma string"
texto
x = as.character(3.14)
x
class(x)
# Concatenando Strings
nome = 'Barack';
sobrenome = 'Obama'
paste(nome, sobrenome)
cat(nome, sobrenome)
# Formatando a saída
sprintf('%s governa os EUA há %d anos', nome, 8)
# Formatando a saída
sprintf('%s governa os EUA há %d %d anos', nome, sobrenome, 8)
# Formatando a saída
sprintf('%s %s governa os EUA há %d anos', nome, sobrenome, 8)
# Extraindo parte de uam string
texto <- 'Isso é uma string'
substr(texto, start = 12, stop = 17)
?substr
nchar(texto)
# Extraindo parte de uam string
texto <- 'Isso é uma string'
substr(texto, start = 12, stop = nchar(texto))
?substr
# Alterando a capitalização
tolower(texto)
toupper(texto)
# Dividindo a string em caracteres
strsplit(texto, NULL)
?strsplit
# Dividinho a string em espaço em branco
strsplit(texto, ' ')
string1 <- c('Isso é uma string qualquer de teste1!', 'Isso é uma string qualquer de teste2!')
string2 <- c('Isso é uma string qualquer de teste3!', 'Isso é uma string qualquer de teste4!')
str_c(string1, string2, sep = '')
string1 <- c('Isso é uma string qualquer de teste1!', 'Isso é uma string qualquer de teste2!')
string2 <- c('Isso é uma string qualquer de teste3!', 'Isso é uma string qualquer de teste4!')
str_c(string1, string2, sep = '')
str_c(c = (string1, string2), sep = '')
str_c(c(string1, string2), sep = '')
?str_c
?str_c
# Usando stringr
library(stringr)
# Dividindo a string em caracteres
strsplit(texto, NULL)
?strsplit
# Dividinho a string em espaço em branco
strsplit(texto, ' ')
string1 <- c('Isso é uma string qualquer de teste1!', 'Isso é uma string qualquer de teste2!')
string2 <- c('Isso é uma string qualquer de teste3!', 'Isso é uma string qualquer de teste4!')
?str_c
str_c(c(string1, string2), sep = '')
?str_c
str_c(c(string1, string2), sep = '')
# Contando
str_count(string, 's')
# Contando
str_count(string2, 's')
# Concatenando
?str_c
str_c(c(string1, string2), sep = '')
# Contando
str_count(string2, 's')
# Localizando a primeira e ultima posição que o caractere aparece
str_locate_all(string2, 's')
# Substitui a primeira ocorrencia de um caractere
str_replace(string2, '\\s', '')
# Substitui todas as  ocorrencias de um caractere
str_replace_all(string2, '\\s', '')
string1 <- '23 mai 2000'
string2 <- '1 mai 2000'
padrao <- 'mai 20'
grepl(pattern = padrao, x = string1)
grepl(pattern = padrao, x = string1)
grepl(pattern = padrao, x = string2)
# Detectando padrões nas strings
string1 <- '23 mai 2000'
string2 <- '1 mai 2000'
padrao <- 'mai 20'
grepl(pattern = padrao, x = string1)
padrao <- 'mai20'
grepl(pattern = padrao, x = string2)
arquivo <- read.csv('http://xxxxx')
arquivo <- read.csv("http://datascienceacademy.com.br/blog/aluno/RFundamentos/Datasets/Parte1/dframe.csv")
arquivo <- read.csv('http://www.gutenberg.org/cache/epub/100/pg100.txt')
head(arquivo)
tail(arquivo)
str_count(arquivo, '7')
str_locate_all(arquivo, '7')
strtail <- function(string, number = 1){
if(number < 0){
substring(string, 1 - number)
}else{
substring(string,nchar(string)-number+1)
}
}
strtail("String de teste", 6)
strtail("String de teste", 5)
strtail("String de teste", -5)
df <- data.frame()
class(df)
df
nomes <- character()
idades <- numeric()
datas <- as.Date(character())
codigos <- integer()
df <- data.frame(c(nomes, idades, datas, codigos))
df
# Criando um dataframe de diversos vetores
pesquisa = data.frame(pais, nome, altura, codigo)
### Dataframes
# Criando dataframes
df <- data.frame()
class(df)
df
# Criando vetores
nomes <- character()
idades <- numeric()
datas <- as.Date(character())
codigos <- integer()
df <- data.frame(c(nomes, idades, datas, codigos))
df
# Criando vetores
pais <- c('EUA', 'Dinamarca', 'Holanda', 'Espanha', 'Brasil')
nome <- c('Mauricio', 'Pedro', 'Aline', 'Beatriz', 'Marta')
altura <- c(1.78,1.72,1.63,1.59,1.63)
codigo <- c(5001,2183,4702,7965,8890)
# Criando um dataframe de diversos vetores
pesquisa = data.frame(pais, nome, altura, codigo)
View(pesquisa)
# Adicionando um novo vetor a um existente
olhos = c('Verde', 'Azul', 'Azul', 'Castanho', 'Castanho')
pesquisa = cbind(pesquisa, olhos)
pesquisa
View(pesquisa)
pesquisa[0]
pesquisa[1]
pesquisa[1][1]
pesquisa[1][0]
pesquisa[1][2]
str(pesquisa)
dim(pesquisa)
length(pesquisa)
# Obtendo um vetor de um dataframe
pesquisa$pais
pesquisa[1,1]
pesquisa[3,2]
pesquisa[3,3]
nrow(pesquisa)
ncol(pesquisa)
# Primeiros elementos do dataframe
head(pesquisa)
head(mtcars)
# Últimas linhas do datrame
tail(pesquisa)
tail(mtcars)
?mtcars
mtcars
pesquisa[altura < 1.60,]
pesquisa[altura < 1.60,]
pesquisa[altura < 1.60,c('codigo', 'olhos')]
# Dataframes nomeados
names(pesquisa) <- c('País', 'Nome', 'Altura', 'Código', 'Olhos')
pesquisa
colnames(pesquisa) <- c('Var 1', 'Var 2', 'Var 3', 'Var 4', 'Var 5')
rownames(pesquisa) <- c('Obs 1', 'Obs 2', 'Obs 3', 'Obs 4', 'Obs 5')
pesquisa
?read.csv
df3
# Estruturas de Controle
# If-else
x = 25
if(x < 30)
{"Este número é menor que 30"}
if(x < 30)
"Este número é menor que 30"
if(x < 7){
"Este número é menor que 7"
}else{
"Este número não é menor que 30"
}
if(x < 7){
"Este número é menor que 7"
}else if(x == 7){
"Este número é o número 7"
}else{
"Este número não é menor que 30"
}
ifelse(x < 6, "Correto", NA)
x = c(7,5,4)
ifelse(c < 5, 'Menor que 5',
ifelse(y == 5, "Igual a 5", "Maior que 5"))
ifelse(x < 6, "Correto", NA)
x = c(7,5,4)
ifelse(x < 5, 'Menor que 5',
ifelse(y == 5, "Igual a 5", "Maior que 5"))
x = c(7,5,4)
ifelse(x < 5,
'Menor que 5',
ifelse(x == 5,
"Igual a 5",
"Maior que 5"))
func1 <- function(x,y){
ifelse(y < 7, x + y, 'Não encontrado')
}
func1(4,2)
func1(40,2)
func1(4,7)
func1(40,2)
rep(rep(rnorm(10),5))
x = 0
repeat{
x = x + 3
if(x > 99)
break
print(x)
}
# loop For
for(i in 1:20){print(i)}
for(q in rnorm(10)){print(q)}
# Ignora alguns elementos dentro do loop
for(i in 1:22){
if(i == 13 | i == 15){
next
}
print(i)
}
# Interromper um loop
for(i in 1:22){
if(i == 15){
break
}
print(i)
}
x = 1
while(x < 10){
x = x + 1
print(x)
}
x = 0
# Lopp While não será executado
x = 1
while(x > 10){
x = x + 1
print(x)
}
# Lopp While
x = 1
while(x < 10){
x = x + 1
if(x == 5) break
print(x)
}
vetor <- c(1:12)
vetor
# Exercicio 2
matriz = matrix(data = c(1:16), nrow = 4, ncol = 4)
matriz = matrix(data = c(1:16), nrow = 4, ncol = 4)
matriz
#Exercicio 3
lista <- (vetor, matrix)
#Exercicio 3
lista <- (vetor, matriz)
#Exercicio 3
lista <- list(vetor, matriz)
lista
# Exercicio 4
?read.table
data <- read.table('http://data.princeton.edu/wws509/datasets/effort.dat')
# Exercicio 6
iris
dim(iris)
plot(iris$Sepal.Length, iris$Sepal.Width)
# Exercicio 8
?subset
df <- data.frame(subset(iris, Sepal.Length >	7))
df <- data.frame(subset(iris, Sepal.Length >	7))
df
install.packages('dplyr')
?slice
??slice
slice(iris, (1:15))
library(dplyr)
??slice
slice(iris, (1:15))
RSiteSearch(filter)
# Exercicio 10
RSiteSearch("filter")
?filter
# Exercicio 10
RSiteSearch("filter")
filter(new_df, Sepal.Length	>	6)
new_df <- slice(iris, (1:15))
filter(new_df, Sepal.Length	>	6)
filter(new_df, Sepal.Length	>	7)
filter(new_df, Sepal.Length	>	0)
filter(new_df, Sepal.Length	>	3)
filter(new_df, Sepal.Length	>	5)
getwdc()
getwd()
# Interagindo com o sistema operacional
list.files()
.Platform$OS.type
.Platform$file.sep
Sys.Date()
Sys.info()
R.version()
R.version
?system
system('ls -a')
system('dir')
system('dir')
system('ls -a')
vec <- c(1,2,3,4,5,6)
vetor <- c(1,2,3,4,5,6)
vetor
dados <-(1:50)
matrix(dados, nrow=5, ncolun=5)
matrix(dados, nrow=5, ncol=5)
matrix(dados, nrow=5, ncol=10)
matrix
dados <-(1:50)
matriz = matrix(dados, nrow=5, ncol=10)
matriz
# Criando listas
lista1 <- list(vetor, matriz)
# Criando listas
lista1 <- list(vetor, matriz)
lista1
df1 <-data.frame(caracteres, num_vetor, logic_vetor)
caracteres <- c('A','B','C')
num_vetor <- c(1,2,3)
logic_vetor <- c(TRUE, FALSE, TRUE)
df1 <-data.frame(caracteres, num_vetor, logic_vetor)
df1
names(df1) <- c('Caracteres', 'Numeros', 'Operadores Logicos')
df1
dados <-(1:50)
matriz = matrix(dados, nrow=5, ncol=10, byrow = T)
matriz
matriz = matrix(dados, nrow=5, ncol=10, bycol = T)
# Comparando Vetores e Matrizes
vec1 <- (10,20,5)
vec1 <- (10,20,5)
vec1 <- c(10,20,5)
mat1 <- matrix(vect1, c(60,1,7,8))
vec1 <- c(10,20,5)
mat1 <- matrix(vec1, c(60,1,7,8))
vec1 > 10
mat1 > 20
mat1 === 2
vec1 <- c(10,20,5)
mat1 <- matrix(vec1, c(60,1,7,8))
vec1 > 10
mat1 > 20
mat1 == 2
mat1 == 2 | mat1 == 60
mat1 == 2 & mat1 == 60
!mat1 == 2 | mat1 == 60
for(i in vec1){
if(i > 10) print('Maior que 10')
print('Menor que 10')
}
for(i in vec1){
print(i)
if(i > 10) print('Maior que 10')
print('Menor que 10')
}
for(i in vec1){
print(i)
if(i > 10) {
print('Maior que 10')
}
print('Menor que 10')
}
for(i in vec1){
if(i > 10) {
print(i)
print('Maior que 10')
}
print('Menor que 10')
}
else{}
for(i in vec1){
if(i > 10) {
print(i)
print('Maior que 10')
}
else{
print('Menor que 10')
}
}
for(i in vec1){
if(i > 10) print('Maior que 10')
print('Menor que 10')
}
for(i in vec1){
if(i >= 10) print('Maior que 10')
print('Menor que 10')
}
for(i in vec1){
if(i >= 10){
print('Maior que 10')
}else{
print('Menor que 10')
}
}
for(i in 1:length(vec1)){
if(i >= 10){
print('Maior que 10')
}else{
print('Menor que 10')
}
}
for(i in 1:length(vec1)){
if(vec1[i] >= 10){
print('Maior que 10')
}else{
print('Menor que 10')
}
}
mat2 <- t(mat1)
mat2
for(i in mat1){
for(j in mat2){
total <- sum(mat1) + sum(mat2)
}
}
print(total)
