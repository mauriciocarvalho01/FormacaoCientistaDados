# Operadores básicos
# Soma
4+4
# Subtração
4/4
# Potência
4^2**2
# Módulo
14%%3
# Operadores Básicos Relacionais e Lógicos em R
# Operadores básicos
# Soma
4+4
# Subtração
4/4
# Potência
4^2**2
# Módulo
14%%3
# Opreadores relacionais
# Atributos variáveis
a = 7
b = 8
# Operadores
a > 8
b < 8
c <= 8
# Operadores Básicos Relacionais e Lógicos em R
# Operadores básicos
# Soma
4+4
# Subtração
4/4
# Potência
4^2**2
# Módulo
14%%3
# Opreadores relacionais
# Atributos variáveis
a = 7
b = 8
# Operadores
a > 8
b < 8
a <= 8
b >= 8
a != 8
#Operadores lógicos
(a == 8) & (b != 6)
(a == 8) | (b != 6)
print(a != 8)
y2
# Tipos de Dados em R
# Numeric - Todos os números criados em R são do tipo numérico
num = 2.5
num
num2 = 4
num2
x = -123
x =
class(x)
#Conversão de tipos Numeric
is.integer(num2)
y = as.integer(num2)
class(y)
x2 = 3.14
x2
y2 = as.integer(x2)
y2
y = is.double(num2)
z = is.double(num2)
as.integer('3.14')
is.integer('3.14')
class('3.14')
as.integer(TRUE)
as.integer('3.14')
char
as.integer('3.14')
as.integer('Joe')
is.integer('3.14')
class('3.14')
as.integer(TRUE)
char = 'A'
char
# Números Complexos
complexo = 2.5 + 4i
complexo
class(complexo)
sqrt(-1)
sqrt(-1 + 0i)
sqrt(as.complex(-1))
# Lógico
x = 1;
y = -2
z = x > y
class(z)
z
u = TRUE; v = FALSE;
u & v
u | v
!u & !v
var1 = 367
var1
mode(var1)
help('mode')
gc()
help(typeof)
var2 = as.integer(var1)
var2
mode(var2)
typeof(var2)
help(typeof)
var3 = c('seg', 'ter', 'qua')
var3
mode(var3)
var5 = as.character(var1)
var5
mode(var5)
var4 = function(x){x+3}
var4
x <- c(4,5,6)
x
c(4,5,6) -> y
y
ls()
objects()
# Remover objetos
rm(x)
assign(x, c(1.3,6))
# Atibuíndo o valor em uma posição específica
x <- c(4,5,6)
x
c(4,5,6) -> y
y
assign('x', c(1.3,6))
x
x <- function(x) {x + 10}
x(10)
x <- function(x) {x * 10}
x <- function(x) {x * 10}
x(10)
vetor1 <- c(1:10)
vetor1
length(vetor)
length(vetor1)
vetor1 <- c(1:10)
vetor1
length(vetor1)
mode(vetor1)
class(vetor1)
typeof(vetor1)
matriz
matriz <- matrix(1:10, nrow= 2)
matriz
View(matriz)
vetor1 <- c(1:10)
# Matriz: Possui 2 dimensões e 1 tipod e dado
matriz <- matrix(1:10, nrow= 2)
matriz
length(matriz)
mode(matriz)
class(matriz)
typeof(matriz)
array1 <- array(1:5, dim=c(3,3,3))
array1 <- array(1:5, dim=c(3,3,3))
array1
# Array: Possui 2 ou mais dimensões e 1 tipo de dado
array1 <- array(1:5, dim=c(3,3,3))
array1
length(arra1)
Array: Possui 2 ou mais dimensões e 1 tipo de dado
# Array: Possui 2 ou mais dimensões e 1 tipo de dado
array1 <- array(1:5, dim=c(3,3,3))
array1
length(arra1)
# Array: Possui 2 ou mais dimensões e 1 tipo de dado
array1 <- array(1:5, dim=c(3,3,3))
array1
length(array1)
mode(array1)
class(array1)
typeof(array1)
View(iris)
View(iris)
length(iris)
mode(iris)
class(iris)
typeof(iris)
lista <- list(a=matriz1, b=vetor1)
lista <- list(a=matriz, b=vetor1)
View(lista)
# Listas: Coleções de diferentes objetos
# Diferentes tipos de dados são possíveis e comuns
lista <- list(0=matriz, 1=vetor1)
lista <- list(az=matriz, ax=vetor1)
lista <- list(az=matriz, ax=vetor1)
lista1
lista1 <- list(az=matriz, ax=vetor1)
lista1
length(lista1)
mode(lista1)
class(lista1)
typeof(lista1)
# Listas: Coleções de diferentes objetos
# Diferentes tipos de dados são possíveis e comuns
lista1 <- list(qualquer_coisa=matriz, outra_coisa=vetor1)
lista1
length(lista1)
mode(lista1)
class(lista1)
typeof(lista1)
View(lista1)
# Funções tabmém são vistas como objetos em R
func1 <- function(x) {
var1 <- x * x
return var1
# Funções tabmém são vistas como objetos em R
func1 <- function(x) {
var1 <- x * x
return (var1)
}
func1(5)
class(func1)
objects()
rm(arra1, func1)
objects()
# Removendo Objetos
objects()
rm(array1, func1)
objects()
git l
## Strings
# String
texto <- "Isso é uma string"
texto
x = as.character(3.14)
x
class(x)
# Concatenando Strings
nome = 'Barack';
sobrenome = 'Obama'
paste(nome, sobrenome)
cat(nome, sobrenome)
# Formatando a saída
sprintf('%s governa os EUA há %d anos', nome, 8)
# Formatando a saída
sprintf('%s governa os EUA há %d %d anos', nome, sobrenome, 8)
# Formatando a saída
sprintf('%s %s governa os EUA há %d anos', nome, sobrenome, 8)
# Extraindo parte de uam string
texto <- 'Isso é uma string'
substr(texto, start = 12, stop = 17)
?substr
nchar(texto)
# Extraindo parte de uam string
texto <- 'Isso é uma string'
substr(texto, start = 12, stop = nchar(texto))
?substr
# Alterando a capitalização
tolower(texto)
toupper(texto)
# Dividindo a string em caracteres
strsplit(texto, NULL)
?strsplit
# Dividinho a string em espaço em branco
strsplit(texto, ' ')
string1 <- c('Isso é uma string qualquer de teste1!', 'Isso é uma string qualquer de teste2!')
string2 <- c('Isso é uma string qualquer de teste3!', 'Isso é uma string qualquer de teste4!')
str_c(string1, string2, sep = '')
string1 <- c('Isso é uma string qualquer de teste1!', 'Isso é uma string qualquer de teste2!')
string2 <- c('Isso é uma string qualquer de teste3!', 'Isso é uma string qualquer de teste4!')
str_c(string1, string2, sep = '')
str_c(c = (string1, string2), sep = '')
str_c(c(string1, string2), sep = '')
?str_c
?str_c
# Usando stringr
library(stringr)
# Dividindo a string em caracteres
strsplit(texto, NULL)
?strsplit
# Dividinho a string em espaço em branco
strsplit(texto, ' ')
string1 <- c('Isso é uma string qualquer de teste1!', 'Isso é uma string qualquer de teste2!')
string2 <- c('Isso é uma string qualquer de teste3!', 'Isso é uma string qualquer de teste4!')
?str_c
str_c(c(string1, string2), sep = '')
?str_c
str_c(c(string1, string2), sep = '')
# Contando
str_count(string, 's')
# Contando
str_count(string2, 's')
# Concatenando
?str_c
str_c(c(string1, string2), sep = '')
# Contando
str_count(string2, 's')
# Localizando a primeira e ultima posição que o caractere aparece
str_locate_all(string2, 's')
# Substitui a primeira ocorrencia de um caractere
str_replace(string2, '\\s', '')
# Substitui todas as  ocorrencias de um caractere
str_replace_all(string2, '\\s', '')
string1 <- '23 mai 2000'
string2 <- '1 mai 2000'
padrao <- 'mai 20'
grepl(pattern = padrao, x = string1)
grepl(pattern = padrao, x = string1)
grepl(pattern = padrao, x = string2)
# Detectando padrões nas strings
string1 <- '23 mai 2000'
string2 <- '1 mai 2000'
padrao <- 'mai 20'
grepl(pattern = padrao, x = string1)
padrao <- 'mai20'
grepl(pattern = padrao, x = string2)
arquivo <- read.csv('http://xxxxx')
arquivo <- read.csv("http://datascienceacademy.com.br/blog/aluno/RFundamentos/Datasets/Parte1/dframe.csv")
arquivo <- read.csv('http://www.gutenberg.org/cache/epub/100/pg100.txt')
head(arquivo)
tail(arquivo)
str_count(arquivo, '7')
str_locate_all(arquivo, '7')
strtail <- function(string, number = 1){
if(number < 0){
substring(string, 1 - number)
}else{
substring(string,nchar(string)-number+1)
}
}
strtail("String de teste", 6)
strtail("String de teste", 5)
strtail("String de teste", -5)
df <- data.frame()
class(df)
df
nomes <- character()
idades <- numeric()
datas <- as.Date(character())
codigos <- integer()
df <- data.frame(c(nomes, idades, datas, codigos))
df
# Criando um dataframe de diversos vetores
pesquisa = data.frame(pais, nome, altura, codigo)
### Dataframes
# Criando dataframes
df <- data.frame()
class(df)
df
# Criando vetores
nomes <- character()
idades <- numeric()
datas <- as.Date(character())
codigos <- integer()
df <- data.frame(c(nomes, idades, datas, codigos))
df
# Criando vetores
pais <- c('EUA', 'Dinamarca', 'Holanda', 'Espanha', 'Brasil')
nome <- c('Mauricio', 'Pedro', 'Aline', 'Beatriz', 'Marta')
altura <- c(1.78,1.72,1.63,1.59,1.63)
codigo <- c(5001,2183,4702,7965,8890)
# Criando um dataframe de diversos vetores
pesquisa = data.frame(pais, nome, altura, codigo)
View(pesquisa)
# Adicionando um novo vetor a um existente
olhos = c('Verde', 'Azul', 'Azul', 'Castanho', 'Castanho')
pesquisa = cbind(pesquisa, olhos)
pesquisa
View(pesquisa)
pesquisa[0]
pesquisa[1]
pesquisa[1][1]
pesquisa[1][0]
pesquisa[1][2]
str(pesquisa)
dim(pesquisa)
length(pesquisa)
# Obtendo um vetor de um dataframe
pesquisa$pais
pesquisa[1,1]
pesquisa[3,2]
pesquisa[3,3]
nrow(pesquisa)
ncol(pesquisa)
# Primeiros elementos do dataframe
head(pesquisa)
head(mtcars)
# Últimas linhas do datrame
tail(pesquisa)
tail(mtcars)
?mtcars
mtcars
pesquisa[altura < 1.60,]
pesquisa[altura < 1.60,]
pesquisa[altura < 1.60,c('codigo', 'olhos')]
# Dataframes nomeados
names(pesquisa) <- c('País', 'Nome', 'Altura', 'Código', 'Olhos')
pesquisa
colnames(pesquisa) <- c('Var 1', 'Var 2', 'Var 3', 'Var 4', 'Var 5')
rownames(pesquisa) <- c('Obs 1', 'Obs 2', 'Obs 3', 'Obs 4', 'Obs 5')
pesquisa
?read.csv
df3
# Estruturas de Controle
# If-else
x = 25
if(x < 30)
{"Este número é menor que 30"}
if(x < 30)
"Este número é menor que 30"
if(x < 7){
"Este número é menor que 7"
}else{
"Este número não é menor que 30"
}
if(x < 7){
"Este número é menor que 7"
}else if(x == 7){
"Este número é o número 7"
}else{
"Este número não é menor que 30"
}
ifelse(x < 6, "Correto", NA)
x = c(7,5,4)
ifelse(c < 5, 'Menor que 5',
ifelse(y == 5, "Igual a 5", "Maior que 5"))
ifelse(x < 6, "Correto", NA)
x = c(7,5,4)
ifelse(x < 5, 'Menor que 5',
ifelse(y == 5, "Igual a 5", "Maior que 5"))
x = c(7,5,4)
ifelse(x < 5,
'Menor que 5',
ifelse(x == 5,
"Igual a 5",
"Maior que 5"))
func1 <- function(x,y){
ifelse(y < 7, x + y, 'Não encontrado')
}
func1(4,2)
func1(40,2)
func1(4,7)
func1(40,2)
rep(rep(rnorm(10),5))
x = 0
repeat{
x = x + 3
if(x > 99)
break
print(x)
}
# loop For
for(i in 1:20){print(i)}
for(q in rnorm(10)){print(q)}
# Ignora alguns elementos dentro do loop
for(i in 1:22){
if(i == 13 | i == 15){
next
}
print(i)
}
# Interromper um loop
for(i in 1:22){
if(i == 15){
break
}
print(i)
}
x = 1
while(x < 10){
x = x + 1
print(x)
}
x = 0
# Lopp While não será executado
x = 1
while(x > 10){
x = x + 1
print(x)
}
# Lopp While
x = 1
while(x < 10){
x = x + 1
if(x == 5) break
print(x)
}
